import * as libCoverage from "istanbul-lib-coverage";
import * as fuzzer from "@jazzer.js/fuzzer";
import * as hooking from "@jazzer.js/hooking";
import { Options } from "./options";
declare global {
    var Fuzzer: fuzzer.Fuzzer;
    var HookManager: hooking.HookManager;
    var __coverage__: libCoverage.CoverageMapData;
    var options: Options;
}
export declare function initFuzzing(options: Options): Promise<void>;
export declare function startFuzzing(options: Options): Promise<void>;
export declare function startFuzzingNoInit(fuzzFn: fuzzer.FuzzTarget, options: Options): Promise<void>;
/**
 * Wraps the given fuzz target function to handle errors from both the fuzz target and bug detectors.
 * Ensures that errors thrown by bug detectors have higher priority than errors in the fuzz target.
 */
export declare function wrapFuzzFunctionForBugDetection(originalFuzzFn: fuzzer.FuzzTarget): fuzzer.FuzzTarget;
export * from "./api";
export { FuzzedDataProvider } from "./FuzzedDataProvider";
export { buildOptions, defaultOptions, Options, ParameterResolverIndex, setParameterResolverValue, } from "./options";
