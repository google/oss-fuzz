diff --git a/BUILD.gn b/BUILD.gn
index 69767d6a45..b1d29ad9c3 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -30,6 +30,10 @@ if (angle_has_build) {
   using_sanitizer = false
 }
 
+declare_args() {
+  complete_static_lib = true
+}
+
 declare_args() {
   # Use the PCI lib to collect GPU information on Linux.
   use_libpci = (is_linux || is_chromeos) && (angle_use_x11 || use_ozone) &&
@@ -109,6 +113,7 @@ if (angle_build_all) {
       ":angle_shader_translator",
       ":translator_fuzzer",
       ":xxhash_fuzzer",
+      ":fuzz_sha1",
       "$angle_root/samples:angle_samples",
       "$angle_root/src/tests:angle_tests",
     ]
@@ -522,6 +527,32 @@ if (angle_has_build) {
     sources = [ "src/common/third_party/xxhash/xxhash_fuzzer.cpp" ]
     deps = [ ":xxhash" ]
   }
+
+  executable("fuzz_sha1") {
+    sources = [ "src/fuzz/fuzz_sha1.cc" ]
+    deps = [
+      ":angle",
+      ":angle_common",
+    ]
+
+    cflags = [
+      "-fsanitize=" + getenv("SANITIZER"),
+      "-fsanitize=fuzzer-no-link",
+    ]
+
+    ldflags = [
+      "-Wl,-Bstatic",
+      "-fsanitize=" + getenv("SANITIZER"),
+      "-L/usr/lib/x86_64-linux-gnu",
+      "-L/usr/lib/gcc/x86_64-linux-gnu/9",
+      rebase_path(getenv("LIB_FUZZING_ENGINE_DEPRECATED"), root_build_dir),
+      "-Wl,-Bdynamic",
+    ]
+
+    configs -= ["//build/config/compiler:thin_archive"]
+
+    libs = []
+  }
 }
 
 template("angle_common_lib") {
