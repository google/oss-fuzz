#0 building with "default" instance using docker driver

#1 [internal] load build definition from ubuntu_20_04.Dockerfile
#1 transferring dockerfile: 9.67kB done
#1 DONE 0.0s

#2 [internal] load metadata for gcr.io/oss-fuzz-base/base-clang:ubuntu_20_04
#2 DONE 0.0s

#3 [internal] load metadata for gcr.io/oss-fuzz-base/indexer:latest
#3 DONE 0.4s

#4 [internal] load .dockerignore
#4 transferring context: 2B done
#4 DONE 0.0s

#5 FROM gcr.io/oss-fuzz-base/indexer:latest@sha256:0b3c8d6be91227d926b87fb13971a3385f751e0cc61684136a148aa8d04d48cb
#5 DONE 0.0s

#6 [stage-0  1/32] FROM gcr.io/oss-fuzz-base/base-clang:ubuntu_20_04
#6 DONE 0.0s

#7 [internal] load build context
#7 transferring context: 4.24kB done
#7 DONE 0.0s

#8 [stage-0 22/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang-jcc2 /usr/local/bin/
#8 DONE 0.1s

#9 [stage-0 23/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang++-jcc2 /usr/local/bin
#9 DONE 0.1s

#10 [stage-0 21/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang++-jcc /usr/local/bin
#10 DONE 0.1s

#11 [stage-0 20/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang-jcc /usr/local/bin/
#11 DONE 0.1s

#12 [stage-0 11/32] RUN precompile_afl
#12 CACHED

#13 [stage-0  7/32] RUN curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.9.0/bazelisk-linux-amd64 -o /usr/local/bin/bazel &&     chmod +x /usr/local/bin/bazel
#13 CACHED

#14 [stage-0 19/32] COPY bazel_build_fuzz_tests     cargo     compile     compile_afl     compile_centipede     compile_honggfuzz     compile_fuzztests.sh     compile_go_fuzzer     compile_javascript_fuzzer     compile_libfuzzer     compile_native_go_fuzzer     compile_native_go_fuzzer_v2     go_utils.sh     compile_python_fuzzer     debug_afl     install_go.sh     install_javascript.sh     install_java.sh     install_python.sh     install_ruby.sh     install_rust.sh     install_swift.sh     make_build_replayable.py     python_coverage_helper.py     replay_build.sh     srcmap     write_labels.py     unshallow_repos.py     /usr/local/bin/
#14 CACHED

#15 [stage-0 12/32] RUN cd /src &&     curl -L -O https://github.com/google/honggfuzz/archive/oss-fuzz.tar.gz &&     mkdir honggfuzz &&     cd honggfuzz &&     tar -xz --strip-components=1 -f /src/oss-fuzz.tar.gz &&     rm -rf examples /src/oss-fuzz.tar.gz
#15 CACHED

#16 [stage-0  9/32] RUN git clone https://github.com/AFLplusplus/AFLplusplus.git aflplusplus &&     cd aflplusplus &&     git checkout daaefcddc063b356018c29027494a00bcfc3e240 &&     wget --no-check-certificate -O oss.sh https://raw.githubusercontent.com/vanhauser-thc/binary_blobs/master/oss.sh &&     rm -rf .git &&     chmod 755 oss.sh
#16 CACHED

#17 [stage-0 29/32] RUN cd /tmp && git clone https://github.com/NixOS/patchelf &&     apt-get update && apt-get install -y autoconf &&     cd patchelf && git checkout 523f401584d9584e76c9c77004e7abeb9e6c4551 &&     unset CFLAGS && export CXXFLAGS='-stdlib=libc++' && export LDFLAGS='-lpthread' &&     ./bootstrap.sh && ./configure && make &&     cp /tmp/patchelf/src/patchelf /usr/local/bin &&     rm -rf /tmp/patchelf && apt-get remove -y autoconf
#17 CACHED

#18 [stage-0  4/32] RUN PYTHON_DEPS="        zlib1g-dev         libncurses5-dev         libgdbm-dev         libnss3-dev         libssl-dev         libsqlite3-dev         libreadline-dev         libffi-dev         libbz2-dev         liblzma-dev" &&     unset CFLAGS CXXFLAGS &&     apt-get install -y $PYTHON_DEPS &&     cd /tmp &&     curl -O https://www.python.org/ftp/python/3.11.13/Python-3.11.13.tar.xz &&     tar -xvf Python-3.11.13.tar.xz &&     cd Python-3.11.13 &&     ./configure --enable-optimizations --enable-shared &&     make -j$(nproc) &&     make install &&     ldconfig &&     ln -s /usr/local/bin/python3 /usr/local/bin/python &&     cd .. &&     rm -r /tmp/Python-3.11.13.tar.xz /tmp/Python-3.11.13 &&     rm -rf /usr/local/lib/python3.11/test &&     python3 -m ensurepip &&     python3 -m pip install --upgrade pip &&     apt-get remove -y $PYTHON_DEPS # https://github.com/google/oss-fuzz/issues/3888
#18 CACHED

#19 [stage-0 25/32] COPY llvmsymbol.diff /src
#19 CACHED

#20 [stage-0 26/32] COPY detect_repo.py /opt/cifuzz/
#20 CACHED

#21 [stage-0 21/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang++-jcc /usr/local/bin
#21 CACHED

#22 [stage-0 13/32] COPY precompile_honggfuzz /usr/local/bin/
#22 CACHED

#23 [stage-0 30/32] COPY indexer /opt/indexer
#23 CACHED

#24 [stage-0 24/32] RUN chmod +x /usr/local/bin/clang-jcc /usr/local/bin/clang++-jcc /usr/local/bin/clang-jcc2 /usr/local/bin/clang++-jcc2
#24 CACHED

#25 [stage-0 22/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang-jcc2 /usr/local/bin/
#25 CACHED

#26 [stage-0 27/32] COPY bazel.bazelrc /root/.bazelrc
#26 CACHED

#27 [stage-0 10/32] COPY precompile_afl /usr/local/bin/
#27 CACHED

#28 [stage-0 20/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang-jcc /usr/local/bin/
#28 CACHED

#29 [stage-0 15/32] RUN cd /src &&     git clone https://github.com/google/fuzztest &&     cd fuzztest &&     git checkout a37d133f714395cabc20dd930969a889495c9f53 &&     rm -rf .git
#29 CACHED

#30 [stage-0 17/32] RUN precompile_centipede
#30 CACHED

#31 [stage-0  8/32] WORKDIR /src
#31 CACHED

#32 [stage-0 16/32] COPY precompile_centipede /usr/local/bin/
#32 CACHED

#33 [stage-0 31/32] COPY --from=gcr.io/oss-fuzz-base/indexer /indexer/build/indexer /opt/indexer/indexer
#33 CACHED

#34 [stage-0  3/32] RUN /install_deps.sh && rm /install_deps.sh
#34 CACHED

#35 [stage-0 23/32] ADD https://commondatastorage.googleapis.com/clusterfuzz-builds/jcc/clang++-jcc2 /usr/local/bin
#35 CACHED

#36 [stage-0  2/32] COPY install_deps.sh /
#36 CACHED

#37 [stage-0  6/32] RUN unset CFLAGS CXXFLAGS && pip3 install -v --no-cache-dir     six==1.15.0 absl-py==2.3.0 pyelftools==0.32 && rm -rf /tmp/*
#37 CACHED

#38 [stage-0 14/32] RUN precompile_honggfuzz
#38 CACHED

#39 [stage-0 28/32] RUN mkdir -p /ccache/bin && mkdir -p /ccache/cache &&     ln -s /usr/local/bin/ccache /ccache/bin/clang &&     ln -s /usr/local/bin/ccache /ccache/bin/clang++ &&     ln -s /usr/local/bin/ccache /ccache/bin/clang-jcc &&     ln -s /usr/local/bin/ccache /ccache/bin/clang++-jcc
#39 CACHED

#40 [stage-0  5/32] RUN cd /tmp && curl -OL https://github.com/ccache/ccache/releases/download/v4.10.2/ccache-4.10.2.tar.xz &&     tar -xvf ccache-4.10.2.tar.xz && cd ccache-4.10.2 &&     mkdir build && cd build &&     export LDFLAGS='-lpthread' &&     cmake -D CMAKE_BUILD_TYPE=Release .. &&     make -j && make install &&     rm -rf /tmp/ccache-4.10.2 /tmp/ccache-4.10.2.tar.xz
#40 CACHED

#41 [stage-0 18/32] COPY sanitizers /usr/local/lib/sanitizers
#41 CACHED

#42 [stage-0 32/32] RUN chmod a+x /opt/indexer/indexer /opt/indexer/index_build.py
#42 CACHED

#43 exporting to image
#43 exporting layers done
#43 writing image sha256:07a7ae325e252ea68c48c1719e0db3c04580a0a2046ad5f457ce3bcb2907ad32 done
#43 naming to docker.io/library/base-builder:ubuntu_20_04 done
#43 DONE 0.0s
